#!/bin/sh

help() {
    echo "\
Usage: $0 {1, 2, ..., 5}...
Make NAV collect \$1 assigned addresses with timestamp t, \$2 assigned addresses
with timestamp t+5min, \$3 assigned addresses with timestamp t+10min, ..., where
t is the current time and \$N denotes the Nth positional argument.\
" >&2
}


reset_dhcp() {
    # Reset lease table of DHCP server and then acquire $1 leases
    sudo docker compose exec kea clear-leases || exit 1
    for i in $(seq 1 "$1"); do
        sudo docker compose exec "client$i" dhcpcd-run || exit 1
    done
}


collect_dhcp() {
    # Make NAV collect metrics from DHCP server
    sudo docker compose exec sh -c "TZ=\"$tz\" nav dhcpmetrics" || exit 1
}


timestamp() {
    # https://unix.stackexchange.com/questions/703141/whats-the-posix-compliant-way-to-get-the-epoch-timestamp-in-a-shell
    echo $(($(TZ=GMT0 date \
+"((%Y-1600)*365+(%Y-1600)/4-(%Y-1600)/100+(%Y-1600)/400+1%j-1000-135140)\
*86400+(1%H-100)*3600+(1%M-100)*60+(1%S-100)")))
}


if test "$#" -eq 0; then
    help
    exit 1
fi

for arg in "$@"; do
    if ! { test "$arg" -ge 1 && test "$arg" -le 5; } 2>/dev/null; then
        help
        exit 1
    fi
done

timeoffset=0
tz="CUSTOM+00:00:00"
while test "$#" -gt 0; do
    start="$(timestamp)"
    reset_dhcp "$1"
    collect_dhcp
    end="$(timestamp)"
    timeoffset=$((timeoffset + 300 + start - end))
    hours=$((timeoffset / 3600))
    minutes=$((timeoffset % 3600 / 60))
    seconds=$((timeoffset % 60))
    tz="CUSTOM+$hours:$minutes:$seconds"
    shift 1
done
