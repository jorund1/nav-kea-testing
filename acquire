#!/bin/sh

help() {
    echo "\
Usage: $0 navdir statlist...

Description:
  simulate acquisition and release of dhcp leases from a kea dhcp server,
  and statistics collection by nav.

Arguments:
  navdir is the path to the project directory of your local NAV codebase.

  statlist is a list of numbers between 1 and 5 (inclusive) and specifies
  the lease history of the dhcp server. The list 

    1 4 2

  specifies that at minute 0, one address is leased, at minute 5, four addresses
  are leased, and at minute 10, two addresses are leased from the dhcp server.
" >&2
}

inform() {
    echo -e "\033[36;1m$@\033[0m" >&2
}


reset_dhcp() {
    # Reset lease table of DHCP server and then acquire $1 leases
    inform "kea: reseting lease table"
    sudo docker compose exec kea clear-leases || exit 1
    for i in $(seq 1 "$1"); do
        inform "client$i: requesting lease"
        sudo docker compose exec "client$i" dora -dev eth0 || exit 1
    done
}


collect_dhcp() {
    # Make NAV collect metrics from DHCP server
    inform "nav: collecting metrics"
    sudo docker compose --project-directory="$NAVDIR" exec nav bash -c "TZ=\"$tz\" navexternalstats" || exit 1
}


timestamp() {
    # https://unix.stackexchange.com/questions/703141/whats-the-posix-compliant-way-to-get-the-epoch-timestamp-in-a-shell
    echo $(($(TZ=GMT0 date \
+"((%Y-1600)*365+(%Y-1600)/4-(%Y-1600)/100+(%Y-1600)/400+1%j-1000-135140)\
*86400+(1%H-100)*3600+(1%M-100)*60+(1%S-100)")))
}


if test "$#" -le 1; then
    help
    exit 1
fi

NAVDIR="$1"
shift

if ! test -d "$NAVDIR"; then
  help
  exit 1
fi

for arg in "$@"; do
    if ! { test "$arg" -ge 1 && test "$arg" -le 5; } 2>/dev/null; then
        help
        exit 1
    fi
done

timeoffset=0
tz="CUSTOM+00:00:00"
while test "$#" -gt 0; do
    start="$(timestamp)"
    reset_dhcp "$1"
    collect_dhcp
    end="$(timestamp)"
    timeoffset=$((timeoffset + 300 + start - end))
    hours=$((timeoffset / 3600))
    minutes=$((timeoffset % 3600 / 60))
    seconds=$((timeoffset % 60))
    tz="CUSTOM+$hours:$minutes:$seconds"
    inform "<<<travelling to $hours hours, $minutes minutes, $seconds seconds backwards in time<<<"
    shift 1
done
